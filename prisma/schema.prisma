datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  EVENT_COORDINATOR
  ATTENDEE
}

// User model
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String?
  lastName  String?
  role      Role
}

// Event
model Event {
    id        Int         @id @default(autoincrement())
    title     String
    location  String?
    startDate DateTime
    endDate   DateTime
    numOfPos  Int?
    posSystems PosSystem[] // Add this line: a list of POS systems related to the event
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}
model PosSystem {
  id            Int             @id @default(autoincrement())
  identifier    String          // A unique identifier, like "POS-1"
  event         Event           @relation(fields: [eventId], references: [id])
  eventId       Int             // Connects each POS system to an event
  orders        Order[]         // Relation to Orders made on this POS
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Model for individual orders
model Order {
  id            Int             @id @default(autoincrement())
  posSystem     PosSystem       @relation(fields: [posSystemId], references: [id])
  posSystemId   Int             // Connects the order to the POS system
  items         OrderItem[]     // Relation to items in the order
  total         Float           // Total price charged for the order
  received      Float           // Amount of money received
  change        Float           // Change given back
  timestamp     DateTime        // When the order was placed
}

// Model for items in an order
model OrderItem {
  id            Int             @id @default(autoincrement())
  order         Order           @relation(fields: [orderId], references: [id])
  orderId       Int             // Connects an order item to its order
  quantity      Int             // Quantity of the food item ordered
  price         Float           // Price at which the item is sold
  costPrice     Float           // Cost price of the item
}



model foodtruck {
  id            Int      @id @default(autoincrement())
  name          String
  category      String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("foodtrucks")
}
model foodItem {
  id            Int      @id @default(autoincrement())
  name          String
  category      String
  cost          Float?
  quantity      Int
  expiry        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  itemSuppliers ItemSupplier[]
  
  @@map("foodItems")
}
model Supplier {
  id                Int             @id @default(autoincrement())
  name              String
  contact           String
  itemSuppliers     ItemSupplier[]
}
model ItemSupplier {
  id              Int             @id @default(autoincrement())
  itemId          Int
  supplierId      Int
  price           Float
  Item            foodItem        @relation(fields: [itemId], references: [id])
  Supplier        Supplier        @relation(fields: [supplierId], references: [id])
  orderHistories  OrderHistory[]
}

model OrderHistory {
  id              Int          @id @default(autoincrement())
  itemSupplierId  Int
  ItemSupplier    ItemSupplier @relation(fields: [itemSupplierId], references: [id])
  quantity        Int
  addedAt         DateTime     @default(now())
}
model inventory {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("inventorys")
}
model Clock {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
}
